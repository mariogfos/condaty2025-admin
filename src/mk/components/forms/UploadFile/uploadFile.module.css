.uploadFile {
  margin-top: var(--spS);
  margin-bottom: var(--spS);
  position: relative;
}

.uploadFile > p {
  color: var(--cWhite);
  font-size: 12px;
}

.uploadFile label {
  position: absolute;
  top: 0;
  padding: var(--spS);
  color: var(--cWhite);
  font-size: var(--sS);
}

.uploadSection {
  display: flex;
  justify-content: center;
  align-items: center; /* Para centrar el placeholder y el filePreviewRow */
  padding: var(--spXl);
  border-style: solid;
  color: var(--cWhite);
  cursor: pointer;
  border-radius: var(--bRadiusS);
  min-height: 100px;
}

.fileInput {
  display: none;
}

.uploadPlaceholder {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  width: 100%;
}

.uploadPlaceholder > span {
  color: var(--cWhite);
  font-size: 12px;
  margin-top: var(--spXs);
}
.uploadPlaceholder > span:last-of-type {
  font-size: 10px;
  color: var(--cPrimary);
}

.filePreviewRow {
  display: flex;
  align-items: center;
  width: 100%;
}

.imageActionColumn {
  position: relative;
  margin-right: var(--spM, 15px);
  flex-shrink: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  /* width y height se aplican inline desde la prop sizePreview en el TSX */
}

.previewImageTag {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

.visualElementIcon {
  /* Esta clase ya no controla el tamaño principal. */
  /* El tamaño viene de la prop 'size' en el TSX. */
  /* Puedes usarla para display o si los iconos necesitan centrarse adicionalmente */
  /* si su 'size' es menor que el contenedor imageActionColumn. */
  /* Por ahora, la dejamos vacía o con estilos mínimos si son necesarios. */
  display: flex;
  align-items: center;
  justify-content: center;
}
.visualElementIcon svg {
  /* Si los componentes icono no se escalan bien con 'size' */
  /* width: 100%; */ /* Esto podría anular la prop 'size' si el SVG no está bien hecho */
  /* height: 100%; */
}

.fileNameColumn {
  display: flex;
  align-items: center;
  flex-grow: 1;
  overflow: hidden;
  min-width: 0;
}

.fileNameColumn p {
  margin: 0;
  color: var(--cPrimary);
  font-size: var(--sS);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
}

.fileNameColumn p > span {
  color: var(--cWhite);
}

.editButton,
.deleteButton,
.undoDeleteButton,
.mainDeleteIconWhenMarked {
  position: absolute;
  z-index: 10;
  background-color: var(--cBlack); /* SIN FONDO */
  padding: 0 !important; /* SIN PADDING ADICIONAL ALREDEDOR DEL SVG */
  border: none !important; /* SIN BORDE */
  /* La prop 'circle' en el TSX podría añadir un border-radius, si no lo quieres, quita 'circle' */
  /* El color del icono SVG se pasa mediante la prop 'color' en el TSX */
}

.editButton {
  top: 2px; /* Ajusta según necesites para que quede pegado al borde */
  right: 2px; /* Ajusta según necesites */
}

.deleteButton {
  top: 2px; /* Ajusta según necesites */
  left: 2px; /* Ajusta según necesites */
}

.undoDeleteButton {
  top: 2px; /* Ajusta según necesites */
  left: 2px; /* Ajusta según necesites */
}

.mainDeleteIconWhenMarked {
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* El color rojo del SVG se debe aplicar via style={{color: 'red'}} en el TSX */
  /* o pasando la prop 'color' si el componente IconTrash lo soporta para el SVG */
}

.uploadFileV2 > div > section {
  display: inline;
  padding: 0;
  border-style: none;
}

.uploadFileV2 > div > section > div > span {
  color: var(--cWhiteV1);
  font-size: 10px;
}

.uploadFileMultiple > div > div {
  position: relative;
}

.uploadFileMultiple > label {
  position: absolute;
  left: 8px;
  top: -8px;
  transition: all 0.3s;
  font-size: var(--sS);
  color: var(--cWhiteV1);
  background-color: var(--cBlack);
  padding-left: var(--spXs);
  padding-right: var(--spXs);
}

.error {
  /* position: absolute; */
  bottom: calc(var(--spL) * -1);
  font-size: var(--sXs);
  color: var(--cError);
  padding-left: var(--spM);
}
